-- Create Table First
CREATE OR REPLACE TABLE
    our_first_db.public.movie_titles (

        show_id STRING,
        type STRING,
        title STRING,
        director STRING,
        cast STRING,
        country STRING,
        date_added STRING,
        release_year STRING,
        rating STRING,
        duration STRING,
        listed_in STRING,
        description STRING
    );

-- Explore the Table
SELECT 
    *
FROM 
     our_first_db.public.movie_titles;    

-- Create file format object
    CREATE OR REPLACE file format
        manage_db.file_formats.csv_fileformat
    TYPE=csv,
    FIELD_DELIMITER=','
    SKIP_HEADER=1
    NULL_IF=('Null','null')
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    EMPTY_FIELD_AS_NULL=TRUE  -- should be converted to a database null
    ;

-- CREATE stage object with Integration Object & File Format Object
CREATE OR REPLACE stage
    manage_db.external_stages.csv_folder
URL='s3://snowflakes3bucket0607/csv/'
STORAGE_INTEGRATION=s3_int
FILE_FORMAT=manage_db.file_formats.csv_fileformat;

LIST 
    @manage_db.external_stages.csv_folder;

-- Use Copy Command
COPY INTO 
    our_first_db.public.movie_titles
FROM 
    @manage_db.external_stages.csv_folder;

-- Explore the Table
SELECT 
    *
FROM 
     our_first_db.public.movie_titles
LIMIT 
    10;

-- Now we will look into Loading JSON
-- Create file format object
CREATE OR REPLACE file format
    manage_db.file_formats.json_fileformat
TYPE='json';

-- Create stage object with integration object and file format object
CREATE OR REPLACE stage
    manage_db.external_stages.json_folder
URL='s3://snowflakes3bucket0607/json/'
STORAGE_INTEGRATION=s3_int
FILE_FORMAT=manage_db.file_formats.json_fileformat;

-- First query from S3 bucket
SELECT
    *
FROM 
    @manage_db.external_stages.json_folder;

SELECT
    $1:asin::STRING AS asin,
    $1:helpful,
    $1:overall,
    $1:reviewText::STRING AS reviewtext,
    DATE_FROM_PARTS(
        RIGHT($1:reviewTime::STRING,4), 
        LEFT($1:reviewTime::STRING,2), 
        CASE WHEN SUBSTRING ($1:reviewTime::STRING,5,1)=','
            THEN SUBSTRING ($1:reviewTime::STRING,4,1)
            ELSE SUBSTRING ($1:reviewTime::STRING,4,2)
        END) AS DATE,
    $1:reviewerID::STRING,
    $1:reviewTime,
    $1:reviewerName::STRING,
    $1:summary::STRING,
    DATE($1:unixReviewTime::INT) AS review_time,
FROM 
    @manage_db.external_stages.json_folder
LIMIT 10;

--  Create Destination Table
CREATE OR REPLACE TABLE
    our_first_db.public.reviews(
    asin STRING,
    helpful STRING,
    overall STRING,
    reviewtext STRING,
    reviewtime DATE,
    reviewerid STRING,
    reviewername STRING,
    summary STRING,
    unixreviewtime DATE
    );

-- Copy transformed data into destination table
COPY INTO 
    our_first_db.public.reviews
FROM 
    (
       SELECT
            $1:asin::STRING AS asin,
            $1:helpful,
            $1:overall,
            $1:reviewText::STRING AS reviewtext,
            DATE_FROM_PARTS(
                RIGHT($1:reviewTime::STRING,4), 
                LEFT($1:reviewTime::STRING,2), 
                CASE WHEN SUBSTRING ($1:reviewTime::STRING,5,1)=','
                    THEN SUBSTRING ($1:reviewTime::STRING,4,1)
                    ELSE SUBSTRING ($1:reviewTime::STRING,4,2)
                END) AS DATE,
            $1:reviewerID::STRING,
            $1:reviewerName::STRING,
            $1:summary::STRING,
            DATE($1:unixReviewTime::INT) AS review_time,
        FROM 
            @manage_db.external_stages.json_folder 
    );

-- Validate Results
SELECT 
    *
FROM 
    our_first_db.public.reviews
LIMIT 
    10;
